/* tslint:disable */
/* eslint-disable */
/**
 * configmanager/service.proto
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: version not set
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ConfigmanagerBulkSetConfigsRequest,
  ConfigmanagerConfigResponse,
  ConfigmanagerGetConfigRequest,
  ConfigmanagerGetTenantIdByCodeRequest,
  ConfigmanagerGetTenantIdByCodeResponse,
  RpcStatus,
} from '../models/index';
import {
    ConfigmanagerBulkSetConfigsRequestFromJSON,
    ConfigmanagerBulkSetConfigsRequestToJSON,
    ConfigmanagerConfigResponseFromJSON,
    ConfigmanagerConfigResponseToJSON,
    ConfigmanagerGetConfigRequestFromJSON,
    ConfigmanagerGetConfigRequestToJSON,
    ConfigmanagerGetTenantIdByCodeRequestFromJSON,
    ConfigmanagerGetTenantIdByCodeRequestToJSON,
    ConfigmanagerGetTenantIdByCodeResponseFromJSON,
    ConfigmanagerGetTenantIdByCodeResponseToJSON,
    RpcStatusFromJSON,
    RpcStatusToJSON,
} from '../models/index';

export interface ConfigManagerBulkSetConfigsRequest {
    body: ConfigmanagerBulkSetConfigsRequest;
}

export interface ConfigManagerGetConfigRequest {
    body: ConfigmanagerGetConfigRequest;
}

export interface ConfigManagerGetTenantIdByCodeRequest {
    body: ConfigmanagerGetTenantIdByCodeRequest;
}

/**
 * 
 */
export class ConfigManagerApi extends runtime.BaseAPI {

    /**
     */
    async configManagerBulkSetConfigsRaw(requestParameters: ConfigManagerBulkSetConfigsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling configManagerBulkSetConfigs.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/configmanager.ConfigManager/BulkSetConfigs`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ConfigmanagerBulkSetConfigsRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     */
    async configManagerBulkSetConfigs(requestParameters: ConfigManagerBulkSetConfigsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.configManagerBulkSetConfigsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async configManagerGetConfigRaw(requestParameters: ConfigManagerGetConfigRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ConfigmanagerConfigResponse>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling configManagerGetConfig.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/configmanager.ConfigManager/GetConfig`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ConfigmanagerGetConfigRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ConfigmanagerConfigResponseFromJSON(jsonValue));
    }

    /**
     */
    async configManagerGetConfig(requestParameters: ConfigManagerGetConfigRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ConfigmanagerConfigResponse> {
        const response = await this.configManagerGetConfigRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async configManagerGetTenantIdByCodeRaw(requestParameters: ConfigManagerGetTenantIdByCodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ConfigmanagerGetTenantIdByCodeResponse>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling configManagerGetTenantIdByCode.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/configmanager.ConfigManager/GetTenantIdByCode`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ConfigmanagerGetTenantIdByCodeRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ConfigmanagerGetTenantIdByCodeResponseFromJSON(jsonValue));
    }

    /**
     */
    async configManagerGetTenantIdByCode(requestParameters: ConfigManagerGetTenantIdByCodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ConfigmanagerGetTenantIdByCodeResponse> {
        const response = await this.configManagerGetTenantIdByCodeRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
